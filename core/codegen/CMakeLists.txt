# OV codegen is build in two single CMake targets: A static library `ov_codegen_lib` and the actual executable
# `ov_codegen`, which depends on the library. The `acplt_builder` tool is build and linked against the library, too.
# 
# * The `ov_codegen_lib` contains the parser, generated by flex and bison. It also requires the header file
#   `ov_codegen.h` to build.
# * The executable `ov_codegen` is build from the `ov_codegen.c`, which contains the main() function and all the
#   code generation stuff.

# Library target (including FLEX/BISON parser to be reused in acplt_builder)
find_package(BISON)
find_package(FLEX)

BISON_TARGET(ovmparser ov_ovmparser.y ${CMAKE_CURRENT_BINARY_DIR}/ovmparser.c
    COMPILE_FLAGS -t)
FLEX_TARGET(ovmscanner ov_ovmscanner.lex  ${CMAKE_CURRENT_BINARY_DIR}/ovmlexer.c)
ADD_FLEX_BISON_DEPENDENCY(ovmscanner ovmparser)

add_library(ov_codegen_lib
    ${BISON_ovmparser_OUTPUTS}
    ${FLEX_ovmscanner_OUTPUTS})
target_include_directories(ov_codegen_lib PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR}   # Required for ovmparser.h (generated by bison)
    ${CMAKE_CURRENT_SOURCE_DIR}   # Required for ov_codegen.h
    )
target_link_libraries(ov_codegen_lib PUBLIC ovheaders)
if(WIN32)
	target_compile_definitions(ov_codegen_lib PRIVATE -DYY_NO_UNISTD_H=1)
endif()


# Actual executable (linked against static library)
add_executable(ov_codegen
    ov_codegen.c)  # Required for ov_codegen.h 
target_link_libraries(ov_codegen PRIVATE ov_codegen_lib)


# Installing ov_codegen is only useful in development component, which we don't support yet. However, we need to add the
# ov_codegen to the EXPORT to include it via find_project() from the build tree.
install(TARGETS ov_codegen
    EXPORT ${PROJECT_NAME}
    RUNTIME
        DESTINATION bin
    COMPONENT development
)
